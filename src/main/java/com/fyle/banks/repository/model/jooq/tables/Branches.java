/*
 * This file is generated by jOOQ.
 */
package com.fyle.banks.repository.model.jooq.tables;


import com.fyle.banks.repository.model.jooq.Indexes;
import com.fyle.banks.repository.model.jooq.Keys;
import com.fyle.banks.repository.model.jooq.Public;
import com.fyle.banks.repository.model.jooq.tables.records.BranchesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Branches extends TableImpl<BranchesRecord> {

    private static final long serialVersionUID = -1586868292;

    /**
     * The reference instance of <code>public.branches</code>
     */
    public static final Branches BRANCHES = new Branches();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BranchesRecord> getRecordType() {
        return BranchesRecord.class;
    }

    /**
     * The column <code>public.branches.ifsc</code>.
     */
    public final TableField<BranchesRecord, String> IFSC = createField("ifsc", org.jooq.impl.SQLDataType.VARCHAR(11).nullable(false), this, "");

    /**
     * The column <code>public.branches.bank_id</code>.
     */
    public final TableField<BranchesRecord, Long> BANK_ID = createField("bank_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.branches.branch</code>.
     */
    public final TableField<BranchesRecord, String> BRANCH = createField("branch", org.jooq.impl.SQLDataType.VARCHAR(74), this, "");

    /**
     * The column <code>public.branches.address</code>.
     */
    public final TableField<BranchesRecord, String> ADDRESS = createField("address", org.jooq.impl.SQLDataType.VARCHAR(195), this, "");

    /**
     * The column <code>public.branches.city</code>.
     */
    public final TableField<BranchesRecord, String> CITY = createField("city", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.branches.district</code>.
     */
    public final TableField<BranchesRecord, String> DISTRICT = createField("district", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.branches.state</code>.
     */
    public final TableField<BranchesRecord, String> STATE = createField("state", org.jooq.impl.SQLDataType.VARCHAR(26), this, "");

    /**
     * Create a <code>public.branches</code> table reference
     */
    public Branches() {
        this(DSL.name("branches"), null);
    }

    /**
     * Create an aliased <code>public.branches</code> table reference
     */
    public Branches(String alias) {
        this(DSL.name(alias), BRANCHES);
    }

    /**
     * Create an aliased <code>public.branches</code> table reference
     */
    public Branches(Name alias) {
        this(alias, BRANCHES);
    }

    private Branches(Name alias, Table<BranchesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Branches(Name alias, Table<BranchesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Branches(Table<O> child, ForeignKey<O, BranchesRecord> key) {
        super(child, key, BRANCHES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BRANCHES_IFSC_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BranchesRecord> getPrimaryKey() {
        return Keys.BRANCHES_IFSC_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BranchesRecord>> getKeys() {
        return Arrays.<UniqueKey<BranchesRecord>>asList(Keys.BRANCHES_IFSC_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<BranchesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BranchesRecord, ?>>asList(Keys.BRANCHES__BRANCHES_BANKS_FKEY);
    }

    public Banks banks() {
        return new Banks(this, Keys.BRANCHES__BRANCHES_BANKS_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Branches as(String alias) {
        return new Branches(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Branches as(Name alias) {
        return new Branches(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Branches rename(String name) {
        return new Branches(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Branches rename(Name name) {
        return new Branches(name, null);
    }
}
