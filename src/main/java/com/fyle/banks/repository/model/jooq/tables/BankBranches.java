/*
 * This file is generated by jOOQ.
 */
package com.fyle.banks.repository.model.jooq.tables;


import com.fyle.banks.repository.model.jooq.Public;
import com.fyle.banks.repository.model.jooq.tables.records.BankBranchesRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BankBranches extends TableImpl<BankBranchesRecord> {

    private static final long serialVersionUID = 1114575033;

    /**
     * The reference instance of <code>public.bank_branches</code>
     */
    public static final BankBranches BANK_BRANCHES = new BankBranches();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BankBranchesRecord> getRecordType() {
        return BankBranchesRecord.class;
    }

    /**
     * The column <code>public.bank_branches.ifsc</code>.
     */
    public final TableField<BankBranchesRecord, String> IFSC = createField("ifsc", org.jooq.impl.SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>public.bank_branches.bank_id</code>.
     */
    public final TableField<BankBranchesRecord, Long> BANK_ID = createField("bank_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.bank_branches.branch</code>.
     */
    public final TableField<BankBranchesRecord, String> BRANCH = createField("branch", org.jooq.impl.SQLDataType.VARCHAR(74), this, "");

    /**
     * The column <code>public.bank_branches.address</code>.
     */
    public final TableField<BankBranchesRecord, String> ADDRESS = createField("address", org.jooq.impl.SQLDataType.VARCHAR(195), this, "");

    /**
     * The column <code>public.bank_branches.city</code>.
     */
    public final TableField<BankBranchesRecord, String> CITY = createField("city", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.bank_branches.district</code>.
     */
    public final TableField<BankBranchesRecord, String> DISTRICT = createField("district", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.bank_branches.state</code>.
     */
    public final TableField<BankBranchesRecord, String> STATE = createField("state", org.jooq.impl.SQLDataType.VARCHAR(26), this, "");

    /**
     * The column <code>public.bank_branches.bank_name</code>.
     */
    public final TableField<BankBranchesRecord, String> BANK_NAME = createField("bank_name", org.jooq.impl.SQLDataType.VARCHAR(49), this, "");

    /**
     * Create a <code>public.bank_branches</code> table reference
     */
    public BankBranches() {
        this(DSL.name("bank_branches"), null);
    }

    /**
     * Create an aliased <code>public.bank_branches</code> table reference
     */
    public BankBranches(String alias) {
        this(DSL.name(alias), BANK_BRANCHES);
    }

    /**
     * Create an aliased <code>public.bank_branches</code> table reference
     */
    public BankBranches(Name alias) {
        this(alias, BANK_BRANCHES);
    }

    private BankBranches(Name alias, Table<BankBranchesRecord> aliased) {
        this(alias, aliased, null);
    }

    private BankBranches(Name alias, Table<BankBranchesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> BankBranches(Table<O> child, ForeignKey<O, BankBranchesRecord> key) {
        super(child, key, BANK_BRANCHES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BankBranches as(String alias) {
        return new BankBranches(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BankBranches as(Name alias) {
        return new BankBranches(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BankBranches rename(String name) {
        return new BankBranches(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BankBranches rename(Name name) {
        return new BankBranches(name, null);
    }
}
