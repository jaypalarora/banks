/*
 * This file is generated by jOOQ.
 */
package com.fyle.banks.repository.model.jooq.tables;


import com.fyle.banks.repository.model.jooq.Indexes;
import com.fyle.banks.repository.model.jooq.Keys;
import com.fyle.banks.repository.model.jooq.Public;
import com.fyle.banks.repository.model.jooq.tables.records.BanksRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Banks extends TableImpl<BanksRecord> {

    private static final long serialVersionUID = 1516634759;

    /**
     * The reference instance of <code>public.banks</code>
     */
    public static final Banks BANKS = new Banks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BanksRecord> getRecordType() {
        return BanksRecord.class;
    }

    /**
     * The column <code>public.banks.name</code>.
     */
    public final TableField<BanksRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(49), this, "");

    /**
     * The column <code>public.banks.id</code>.
     */
    public final TableField<BanksRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.banks</code> table reference
     */
    public Banks() {
        this(DSL.name("banks"), null);
    }

    /**
     * Create an aliased <code>public.banks</code> table reference
     */
    public Banks(String alias) {
        this(DSL.name(alias), BANKS);
    }

    /**
     * Create an aliased <code>public.banks</code> table reference
     */
    public Banks(Name alias) {
        this(alias, BANKS);
    }

    private Banks(Name alias, Table<BanksRecord> aliased) {
        this(alias, aliased, null);
    }

    private Banks(Name alias, Table<BanksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Banks(Table<O> child, ForeignKey<O, BanksRecord> key) {
        super(child, key, BANKS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BANKS_ID_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BanksRecord> getPrimaryKey() {
        return Keys.BANKS_ID_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BanksRecord>> getKeys() {
        return Arrays.<UniqueKey<BanksRecord>>asList(Keys.BANKS_ID_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Banks as(String alias) {
        return new Banks(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Banks as(Name alias) {
        return new Banks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Banks rename(String name) {
        return new Banks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Banks rename(Name name) {
        return new Banks(name, null);
    }
}
